#!/usr/bin/env python3

from configparser import ConfigParser
from importlib import import_module
from optparse import OptionParser

import getpass
import sys
import os

try:
	import MySQLdb
	from MySQLdb.cursors import DictCursor
	from MySQLdb._exceptions import OperationalError
except ModuleNotFoundError:
	print("Module mysqlclient is missing, try installing python3-mysqldb package")
	sys.exit()
#endtry

# ------------------------------------------------------------------------------

parser = OptionParser("Usage: %prog [OPTIONS] <database>")

def print_help(option, opt, value, parser):
	parser.print_help()
	sys.exit()
#enddef

parser.remove_option("-h")
parser.add_option("-?", "--help", action="callback", callback=print_help)
parser.add_option("-h", "--host",
					dest="host", default="localhost", help="Connect to host.")
parser.add_option("-u", "--user", dest="user",
					help="User for login if not current user.")
parser.add_option("-p", "--password", dest="ask_pass", action="store_true", default=False,
					help="Ask for password to use when connecting to server.")

(options, args) = parser.parse_args()

if len(args) < 1:
	parser.print_help()
	sys.exit()
#endif

# ------------------------------------------------------------------------------

connection_options = {
	'db' : args[0],
	'host' : options.host,
	'user' : options.user or getpass.getuser(),
	'cursorclass' : DictCursor
}

if options.ask_pass:
	connection_options['passwd'] = getpass.getpass()
#endif

try:
	db = MySQLdb.connect(**connection_options)
	cursor = db.cursor()
except OperationalError as e:
	if os.path.exists(os.path.expanduser("~/.my.cnf")):
		config = ConfigParser()
		config.read(os.path.expanduser("~/.my.cnf"))

		if config.has_option('client', 'host'):
			connection_options['host'] = config.get('client', 'host')
		#endif

		if config.has_option('client', 'user'):
			connection_options['user'] = config.get('client', 'user')
		#endif

		if config.has_option('client', 'password'):
			connection_options['passwd'] = config.get('client', 'password')
		#endif
	#endif

	try:
		db = MySQLdb.connect(**connection_options)
		cursor = db.cursor()
	except OperationalError as e:
		print("%s: %s" % (e.args[0], e.args[1]))
		sys.exit()
	#endtry
#endtry

# ------------------------------------------------------------------------------

cursor.execute("SHOW TABLE STATUS")
tables = cursor.fetchall()

engines = {}
collations = {}
column_definitions = {}

for t in tables:
	if t['Engine'] == None and t['Comment'] == "VIEW":
		continue
	#endif

	if t['Engine'] not in engines:
		engines[t['Engine']] = []
	#endif
	engines[t['Engine']].append(t['Name'])

	if t['Collation'] not in collations:
		collations[t['Collation']] = []
	#endif
	collations[t['Collation']].append(t['Name'])

	cursor.execute("SHOW FULL COLUMNS FROM `%s`" % t['Name'])
	columns = cursor.fetchall()
	for c in columns:
		definition = "%s%s%s%s" % (
			c['Type'],
			c['Collation'] and t['Collation'] != c['Collation'] and " COLLATE %s" % c['Collation'] or "",
			c['Null'] and " NULL" or " NOT NULL",
			c['Default'] and " DEFAULT %s" % c['Default'] or ""
		)

		if c['Field'] not in column_definitions:
			column_definitions[c['Field']] = {}
		#endif
		if definition not in column_definitions[c['Field']]:
			column_definitions[c['Field']][definition] = []
		#endif
		column_definitions[c['Field']][definition].append("%s.%s" % (t['Name'], c['Field']))
	#endfor
#endfor

print("--------------------------------------------------------------------------------")
print("Engines:")
print("--------------------------------------------------------------------------------")
for engine, tables in engines.items():
	print("%s: %s" % (engine, len(tables)))
	if len(engines) > 1:
		for t in tables:
			print("  - %s" % t)
		#endfor
	#endif
#endfor

print("--------------------------------------------------------------------------------")
print("Collations:")
print("--------------------------------------------------------------------------------")
for collation, tables in collations.items():
	print("%s: %s" % (collation, len(collations)))
	if len(collations) > 1:
		for t in tables:
			print("  - %s" % t)
		#endfor
	#endif
#endfor

print("--------------------------------------------------------------------------------")
print("Columns:")
print("--------------------------------------------------------------------------------")
for column, definitions in column_definitions.items():
	if len(definitions) > 1:
		for definition, definition_columns in definitions.items():
			print("%s %s" % (column, definition))
			for dcol in definition_columns:
				print("    - %s" % dcol)
			#endfor
		#endfor
		print("--------------------------------------------------------------------------------")
	#endif
#endfor
